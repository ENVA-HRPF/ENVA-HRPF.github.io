[{"id":0,"href":"/ENVA-HRPF/ENVA-HRPF.github.io/dev-wiki/categories/","title":"Categories","parent":"DevTeam Wiki","content":"","description":""},{"id":1,"href":"/ENVA-HRPF/ENVA-HRPF.github.io/dev-wiki/","title":"DevTeam Wiki","parent":"","content":" DevTeam Wiki This is a single-page wiki for our development team.\nTable of Contents DevTeam Wiki Table of Contents Code Style Guidelines General Principles Naming Conventions JavaScript Style File Organization Code Formatting Python Style Linting and Formatting Git Workflow Branch Structure Commit Messages Code Review Process Why We Review Code Review Checklist Review Etiquette For Reviewers For Code Authors Code Style Guidelines General Principles Write readable, self-documenting code Prioritize clarity over cleverness Follow the DRY (Don\u0026rsquo;t Repeat Yourself) principle Write testable code Add comments only when necessary to explain \u0026ldquo;why\u0026rdquo;, not \u0026ldquo;what\u0026rdquo; Naming Conventions Use descriptive, meaningful names Follow camelCase for JavaScript/TypeScript variables Use snake_case for Python variables Good Bad userData ud isValidResponse valid calculateTotalPrice calc JavaScript Style File Organization One class per file Group related functionality Import statements at the top Export statements at the bottom Code Formatting Use 2 spaces for indentation Maximum line length: 100 characters Always use semicolons Use single quotes for strings // Example of well-formatted JavaScript code class UserService { constructor(apiClient) { this.apiClient = apiClient; this.cache = new Map(); } async getUserById(userId) { // Check cache first if (this.cache.has(userId)) { return this.cache.get(userId); } // Fetch from API if not in cache try { const user = await this.apiClient.get(`/users/${userId}`); this.cache.set(userId, user); return user; } catch (error) { console.error(\u0026#39;Failed to fetch user:\u0026#39;, error); throw new Error(`Unable to retrieve user with ID ${userId}`); } } } Python Style Follow PEP 8 Use type hints for function parameters and return values Use docstrings for all public functions and classes from typing import Dict, Optional, List import logging logger = logging.getLogger(__name__) class DataProcessor: \u0026#34;\u0026#34;\u0026#34;Processes input data and generates reports.\u0026#34;\u0026#34;\u0026#34; def __init__(self, config: Dict[str, any]): \u0026#34;\u0026#34;\u0026#34;Initialize with configuration dictionary. Args: config: Configuration parameters \u0026#34;\u0026#34;\u0026#34; self.config = config self.initialized = False def process_batch(self, items: List[Dict]) -\u0026gt; Optional[Dict]: \u0026#34;\u0026#34;\u0026#34;Process a batch of items. Args: items: List of item dictionaries to process Returns: Summary of processing results or None if processing failed \u0026#34;\u0026#34;\u0026#34; if not items: return None try: # Processing logic here results = {\u0026#39;processed\u0026#39;: len(items), \u0026#39;failed\u0026#39;: 0} return results except Exception as e: logger.error(f\u0026#34;Processing failed: {str(e)}\u0026#34;) return None Linting and Formatting All code must pass linting before it can be merged:\nJavaScript/TypeScript: ESLint + Prettier Python: flake8 + black CSS/SCSS: stylelint Git Workflow Branch Structure We use a simplified GitFlow workflow with the following branches:\nmaster: Production code. Tagged with releases. develop: Development branch containing next release features. feature/*: Feature branches created from develop. hotfix/*: Emergency fixes for production. Commit Messages Follow the Conventional Commits format:\n\u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt; [optional body] [optional footer(s)] Types:\nfeat: A new feature fix: A bug fix docs: Documentation changes style: Formatting changes refactor: Code change that neither fixes a bug nor adds a feature test: Adding or correcting tests chore: Changes to the build process or auxiliary tools Good Commit Message Example:\nfeat(auth): implement JWT authentication - Add token generation service - Create middleware for token validation - Update user model with token fields Resolves: #123 Code Review Process Why We Review Code Knowledge sharing Consistent coding practices Early bug detection Collective code ownership Mentoring opportunities Review Checklist Code follows our style guidelines Tests are included and passing Documentation is updated The code solves the intended problem No unnecessary complexity or over-engineering No security vulnerabilities No performance issues Review Etiquette For Reviewers Be kind and respectful Explain \u0026ldquo;why\u0026rdquo; in addition to \u0026ldquo;what\u0026rdquo; Use questions rather than statements when applicable Provide examples when suggesting changes Acknowledge good patterns and clever solutions For Code Authors Don\u0026rsquo;t take feedback personally Explain your approach when necessary Be open to alternative solutions Say \u0026ldquo;thank you\u0026rdquo; for helpful feedback ","description":" DevTeam Wiki This is a single-page wiki for our development team.\nTable of Contents DevTeam Wiki Table of Contents Code Style Guidelines General Principles Naming Conventions JavaScript Style File Organization Code Formatting Python Style Linting and Formatting Git Workflow Branch Structure Commit Messages Code Review Process Why We Review Code Review Checklist Review Etiquette For Reviewers For Code Authors Code Style Guidelines General Principles Write readable, self-documenting code Prioritize clarity over cleverness Follow the DRY (Don\u0026rsquo;t Repeat Yourself) principle Write testable code Add comments only when necessary to explain \u0026ldquo;why\u0026rdquo;, not \u0026ldquo;what\u0026rdquo; Naming Conventions Use descriptive, meaningful names Follow camelCase for JavaScript/TypeScript variables Use snake_case for Python variables Good Bad userData ud isValidResponse valid calculateTotalPrice calc JavaScript Style File Organization One class per file Group related functionality Import statements at the top Export statements at the bottom Code Formatting Use 2 spaces for indentation Maximum line length: 100 characters Always use semicolons Use single quotes for strings // Example of well-formatted JavaScript code class UserService { constructor(apiClient) { this.apiClient = apiClient; this.cache = new Map(); } async getUserById(userId) { // Check cache first if (this.cache.has(userId)) { return this.cache.get(userId); } // Fetch from API if not in cache try { const user = await this.apiClient.get(`/users/${userId}`); this.cache.set(userId, user); return user; } catch (error) { console.error(\u0026#39;Failed to fetch user:\u0026#39;, error); throw new Error(`Unable to retrieve user with ID ${userId}`); } } } Python Style Follow PEP 8 Use type hints for function parameters and return values Use docstrings for all public functions and classes from typing import Dict, Optional, List import logging logger = logging.getLogger(__name__) class DataProcessor: \u0026#34;\u0026#34;\u0026#34;Processes input data and generates reports.\u0026#34;\u0026#34;\u0026#34; def __init__(self, config: Dict[str, any]): \u0026#34;\u0026#34;\u0026#34;Initialize with configuration dictionary. Args: config: Configuration parameters \u0026#34;\u0026#34;\u0026#34; self.config = config self.initialized = False def process_batch(self, items: List[Dict]) -\u0026gt; Optional[Dict]: \u0026#34;\u0026#34;\u0026#34;Process a batch of items. Args: items: List of item dictionaries to process Returns: Summary of processing results or None if processing failed \u0026#34;\u0026#34;\u0026#34; if not items: return None try: # Processing logic here results = {\u0026#39;processed\u0026#39;: len(items), \u0026#39;failed\u0026#39;: 0} return results except Exception as e: logger.error(f\u0026#34;Processing failed: {str(e)}\u0026#34;) return None Linting and Formatting All code must pass linting before it can be merged:\n"},{"id":2,"href":"/ENVA-HRPF/ENVA-HRPF.github.io/dev-wiki/tags/","title":"Tags","parent":"DevTeam Wiki","content":"","description":""}]